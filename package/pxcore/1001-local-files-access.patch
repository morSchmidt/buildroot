From 20eeb9e28a7c5179c8788d5cec51ec6ffa0bf4f4 Mon Sep 17 00:00:00 2001
From: Bunio_FH <mkubiak@libertyglobal.com>
Date: Wed, 6 Dec 2017 10:43:15 +0100
Subject: [PATCH] local files access

---
 examples/pxScene2d/src/pxArchive.cpp  | 35 ++++++++++++++++++++
 examples/pxScene2d/src/pxResource.cpp | 31 ++++++++++++++++++
 src/rtScriptNode/rtScriptNode.cpp     | 46 ++++++++++++++++++---------
 3 files changed, 97 insertions(+), 15 deletions(-)

diff --git a/examples/pxScene2d/src/pxArchive.cpp b/examples/pxScene2d/src/pxArchive.cpp
index 6e77bfcd2..eb8ac8fe2 100644
--- a/examples/pxScene2d/src/pxArchive.cpp
+++ b/examples/pxScene2d/src/pxArchive.cpp
@@ -138,6 +138,41 @@ rtError pxArchive::initFromUrl(const rtString& url, const rtString& origin)
       mLoadStatus.set("statusCode",0);
       process(mData.data(),mData.length());
     }
+    else if( *((const char*)url) != '/' )
+    {
+        static struct _node_path {
+            std::string d[10];
+            int         c;
+
+            _node_path() : c(0) {
+                const char *env = ::getenv("NODE_PATH");
+                const char *ptr = env, *last = env;
+                while( ( *ptr++ ) && ( c < 10 ) ) {
+                    if( ( *ptr == 0 ) || ( *ptr == ':' ) ) {
+                        d[c] = std::string( last, ptr );
+                        if( d[c][d[c].size()-1] != '/' )
+                            d[c] += "/";
+                        ++c;
+                        if( *ptr == 0 )
+                            break;
+                        last = ++ptr;
+                    }
+                }
+            }
+        } node_path;
+        int i = 0;
+        for( ; i < node_path.c; ++i ) {
+            if (rtLoadFile((node_path.d[i] + (const char*)url).c_str(), mData) == RT_OK)
+            {
+                mLoadStatus.set("statusCode",0);
+                process(mData.data(),mData.length());
+                break;
+            }
+        }
+        if( i >= node_path.c ) {
+            mLoadStatus.set("statusCode",1);
+        }
+    }
     else
     {
       mLoadStatus.set("statusCode",1);
diff --git a/examples/pxScene2d/src/pxResource.cpp b/examples/pxScene2d/src/pxResource.cpp
index 95b97c036..d6f9b6b1a 100644
--- a/examples/pxScene2d/src/pxResource.cpp
+++ b/examples/pxScene2d/src/pxResource.cpp
@@ -553,6 +553,37 @@ void rtImageResource::loadResourceFromFile()
   rtString status = "resolve";
   rtData d;
   rtError loadImageSuccess = rtLoadFile(mUrl, d);
+  if (loadImageSuccess != RT_OK) {
+    if ( *((const char*)mUrl) != '/' ) {
+      static struct _node_path {
+          std::string d[10];
+          int         c;
+
+          _node_path() : c(0) {
+              const char *env = ::getenv("NODE_PATH");
+              const char *ptr = env, *last = env;
+              while( ( *ptr++ ) && ( c < 10 ) ) {
+                  if( ( *ptr == 0 ) || ( *ptr == ':' ) ) {
+                      d[c] = std::string( last, ptr );
+                      if( d[c][d[c].size()-1] != '/' )
+                          d[c] += "/";
+                      ++c;
+                      if( *ptr == 0 )
+                          break;
+                      last = ++ptr;
+                  }
+              }
+          }
+      } node_path;
+      for( int i = 0; i < node_path.c; ++i ) {
+          if (rtLoadFile((node_path.d[i] + (const char*)mUrl).c_str(), d) == RT_OK)
+          {
+              loadImageSuccess = RT_OK;
+              break;
+          }
+      }
+    }
+  }
   if (loadImageSuccess == RT_OK)
   {
     loadImageSuccess = pxLoadImage((const char *) d.data(), d.length(), imageOffscreen, init_w, init_h, init_sx, init_sy);
diff --git a/src/rtScriptNode/rtScriptNode.cpp b/src/rtScriptNode/rtScriptNode.cpp
index c1c5c6c5b..d26ee653a 100644
--- a/src/rtScriptNode/rtScriptNode.cpp
+++ b/src/rtScriptNode/rtScriptNode.cpp
@@ -906,6 +906,20 @@ static std::string readFile(const char *file)
   return s;
 }
 
+
+static const std::string& getRootPath() {
+    static std::string rootPath;
+    if( rootPath.empty() ) {
+        std::string NODE_PATH = ::getenv("NODE_PATH");
+        size_t colon = NODE_PATH.find(":");
+        if( colon != std::string::npos )
+            rootPath = NODE_PATH.substr( 0, colon );
+        else
+            rootPath = NODE_PATH;
+    }
+    return rootPath;
+}
+
 rtError rtNodeContext::runFile(const char *file, rtValue* retVal /*= NULL*/, const char* args /*= NULL*/)
 {
   if(file == NULL)
@@ -917,7 +931,8 @@ rtError rtNodeContext::runFile(const char *file, rtValue* retVal /*= NULL*/, con
 
   // Read the script file
   js_file   = file;
-  js_script = readFile(file);
+  std::string temp = getRootPath() + "/" + file;
+  js_script = readFile(temp.c_str());
   
   if( js_script.empty() ) // load error
   {
@@ -1306,23 +1321,24 @@ rtNodeContextRef rtScriptNode::createContext(bool ownThread)
 
     if(sandbox_path.empty()) // only once.
     {
-      char *nodePath = ::getenv("NODE_PATH");
-      if (NULL != nodePath)
-      {
-        const std::string NODE_PATH = nodePath;
-        sandbox_path = NODE_PATH + "/" + SANDBOX_JS;
-      }
+//       char *nodePath = ::getenv("NODE_PATH");
+//       if (NULL != nodePath)
+//       {
+//         const std::string NODE_PATH = nodePath;
+        sandbox_path = /*NODE_PATH + "/" + */SANDBOX_JS;
+//       }
     }
 
     // Populate 'sandbox' vars in JS...
-    if(fileExists(sandbox_path.c_str()))
-    {
-      mRefContext->runFile(sandbox_path.c_str());
-    }
-    else
-    {
-      rtLogError("## ERROR:   Could not find \"%s\" ...", sandbox_path.c_str());
-    }
+//     if(fileExists(sandbox_path.c_str()))
+//     {
+//       mRefContext->runFile(sandbox_path.c_str());
+//     }
+//     else
+//     {
+//       rtLogError("## ERROR:   Could not find \"%s\" ...", sandbox_path.c_str());
+//     }
+    mRefContext->runFile(sandbox_path.c_str());
     // !CLF: TODO Why is ctxref being reassigned from the mRefContext already assigned?
     //ctxref = new rtNodeContext(mIsolate, mRefContext);
   }
